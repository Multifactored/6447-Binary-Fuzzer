#!/usr/bin/env python3
# pylint: disable=W0614
from pwn import *
import sys
import subprocess
import os
from csvHelpers import *
from jsonHelpers import *
from plaintextHelpers import *
from xmlHelpers import *
from type_checker import checkCSV, checkJSON, checkXML
import concurrent.futures
import multiprocessing
import time


def runCSVFuzzer(sampleInput, binary, lock, executor, futures):
    print("Is a CSV file...\n", end="")
    futures.append(executor.submit(
        checkBufferOverflowLines, sampleInput, binary, lock))
    futures.append(executor.submit(
        checkBufferOverflowColumns, sampleInput, binary, lock))


def runJSONFuzzer(sampleInput, binary, lock, executor, futures):
    print("Is a JSON file...\n", end="")
    futures.append(executor.submit(fuzzJSON, sampleInput, binary, lock))


def runXMLFuzzer(sampleInput, binary, lock, executor, futures):
    print("Is an XML file...\n", end="")
    futures.append(executor.submit(addForgedURLS, sampleInput, binary, lock))

def runPlaintextFuzzer(sampleInput, binary, lock, executor, futures):
    print("Is a plaintext file...\n", end="")
    futures.append(executor.submit(fuzzPlaintext, sampleInput, binary, lock))


def endTime(start):
    end = time.time()
    difference = end - start
    difference = time.localtime(difference).tm_sec
    print("Elapsed Time: " + str(difference) + " seconds")


if __name__ == "__main__":

    # First check the correct number of arguments are given.
    if len(sys.argv) != 3:
        sys.exit("Usage: ./fuzzer program sampleinput.txt")

    # We begin by opening the sample input file for reading, and extract the contents.
    try:
        sampleInput = open(sys.argv[2], 'r')
    except:
        print("Error:", sys.exc_info()[0])
        sys.exit("Usage: ./fuzzer program sampleinput.txt")

    # Timer starts here to calculate running time.
    start = time.time()

    # We also know the binary will be the first argument given.
    binary = sys.argv[1]
    lock = multiprocessing.Lock()
    futures = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=multiprocessing.cpu_count()) as executor:

        # Now we can begin fuzzing the binary.
        # We first check if it is in csv format.
        if checkCSV(sampleInput):
            runCSVFuzzer(sampleInput, binary, lock, executor, futures)
        # Next we check if it is in json format.
        elif checkJSON(sampleInput):
            runJSONFuzzer(sampleInput, binary, lock, executor, futures)
        # Finally we see if it is in xml format.
        elif checkXML(sampleInput):
            runXMLFuzzer(sampleInput, binary, lock, executor, futures)
        # If it matched none of these file formats, then we treat it as plaintext.
        else:
            runPlaintextFuzzer(sampleInput, binary, lock, executor, futures)

        # If we didn't find a vulnerability through format-specific fuzzing,
        # we can now do some generic fuzzing.
        # So, we first fuzz the binary with input from '/dev/urandom'.
        futures.append(executor.submit(urandomFuzzer, binary, lock))

        # And then we try bit flipping the sample input.
        futures.append(executor.submit(bitFlip, sampleInput, binary, lock))

        for future in concurrent.futures.as_completed(futures):
            try:
                # result holds the value from sendInputAndCheck
                result, description = future.result()
                if result:
                    executor._threads.clear()
                    concurrent.futures.thread._threads_queues.clear()
                    lock.release()
            except Exception as exc:
                pass
            else:
                print("==============================================")
                print(description)
                endTime(start)
                exit(0)
    print("No vulnerabilities found :(\n", end="")
    endTime(start)

# TODO: json2, plaintext2, xml1, xml2, xml3
